---
- name: 从DNAC获取设备配置、以及设备的uuid，demo playbook 1
  hosts: dnac_servers
  vars_files:
    - credentials.yml
  gather_facts: no
  tasks:
  - name: Get all network device info for this family - switches
    cisco.dnac.network_device_info:
      dnac_host: "{{dnac_host}}"
      dnac_username: "{{dnac_username}}"
      dnac_password: "{{dnac_password}}"
      dnac_verify: "{{dnac_verify}}"
      dnac_port: "{{dnac_port}}"
      dnac_version: "{{dnac_version}}"
      family: "Switches and Hubs"
    register: result

  - name: Json Query
    set_fact:
      hostname_id:
        "{{ result.dnac_response | json_query('response[*].{hostname: hostname, id: id}') }}"

  # - name: Show Json Query
  #   debug:
  #     var: hostname_id

  - name: Get config file for device with ID
    cisco.dnac.network_device_config_info:
      dnac_host: "{{dnac_host}}"
      dnac_username: "{{dnac_username}}"
      dnac_password: "{{dnac_password}}"
      dnac_verify: "{{dnac_verify}}"
      dnac_port: "{{dnac_port}}"
      dnac_version: "{{dnac_version}}"
      networkDeviceId: "{{ item }}" 
    register: config_result
    loop: "{{ device_uuid }}"

  - name: set config var.
    set_fact:
      config_list:
        "{{ config_result.results }}"

  # - name: config list 原始信息
  #   debug:
  #     msg: "{{ config_list }}"

  # - name: Show result
  #   debug:
  #     msg: "{{ item.dnac_response.response }}"
  #   with_items: "{{ config_list }}"

  - name: SAVE config to file
    local_action: copy content="{{ item.dnac_response.response }}" dest="backup/show_run_{{ item.item }}.txt"
    with_items: "{{ config_list }}"
    loop_control:
      label: "For device id: {{ item.item }}"

  - name: REMOVE CONFIG LINES WITH LIST
    lineinfile:
        path: "backup/show_run_{{ item.1 }}.txt"
        state: absent
        regexp: '^{{ item.0 }}'
    delegate_to: localhost
    with_nested: 
      - "{{ lines_removed }}"
      - "{{ device_uuid }}"


- name: 配置备份文件同步到远端服务器 - Github，demo playbook 2
  hosts: localhost
  connection: local
  tags: git
  ignore_errors: true
  
  tasks:
  - name: 文件更新至local git repo，检查是否有变化
    shell: |
      git add --all
      git diff-index --quiet HEAD --;
    register: git_result
    run_once: true

  # - name: debug output
  #   debug:
  #     msg: "{{ git_result }}"

  - name: 如果文件没变化，则仅仅显示信息“文件没有变化”
    debug:
      msg: "文件没有变化，不需要 git commit"
    when: not git_result.failed
    run_once: true

  - name: 如果文件有变化，则同步到 Github
    shell: |
      git commit -m "Updates config from ansible auto at {{ ansible_date_time.date }}"
      git push origin main -f 
    register: gitcommit_result
    run_once: true
    when: git_result.failed
